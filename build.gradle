/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    // id 'application'
    id 'java'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.5.5'
    // axion: Gradle release and version management plugin
    id 'pl.allegro.tech.build.axion-release' version '1.13.3'
    // plugins for building docker image and running docker container
    id 'com.palantir.docker' version '0.29.0'
    id 'com.palantir.docker-run' version '0.29.0'
}

group 'com.rapi'
version = scmVersion.version
description 'Simple RESTful micro-service for Themepark Rides'

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-devtools'

    // SLF4J: Logging Facade
    implementation 'org.slf4j:slf4j-api'

    // H2 DB
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Unit testing and mocks
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // // JUnit
    // // Use JUnit Jupiter API for testing.
    // testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    // // Use JUnit Jupiter Engine for testing.
    // testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // This dependency is used by the application.
    // implementation 'com.google.guava:guava:29.0-jre'
}

// application {
//     // Define the main class for the application.
//     mainClass = 'com.rapi.RideApp'
// }

test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

String imageName = "srik1980/rapi:$version"
println "imageName: ${imageName}"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()]) 
}

dockerRun {
    name project.name
    image imageName
    ports '9001:9001'
    clean true
}
