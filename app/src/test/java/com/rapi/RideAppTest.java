/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.rapi;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

@ExtendWith(SpringExtension.class)
@SpringBootTest
@AutoConfigureMockMvc

public class RideAppTest {

  @Autowired
  private MockMvc mockMvc;

  @Test
  public void getAllRides() throws Exception {
    mockMvc.perform(MockMvcRequestBuilders.get("/themepark/ride")
            .accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk())
            .andReturn();
  }

  // @Test
  // public void getRide() throws Exception {
  //   mockMvc.perform(MockMvcRequestBuilders.get("/themepark/ride/1")
  //           .accept(MediaType.APPLICATION_JSON))
  //           .andExpect(status().isOk())
  //           .andReturn();
  // }
  //
  // @Test
  // public void returnHttpNotFoundForInvalidRideId() throws Exception {
  //   mockMvc.perform(MockMvcRequestBuilders.get("/themepark/ride/6")
  //           .accept(MediaType.APPLICATION_JSON))
  //           .andExpect(status().isNotFound())
  //           .andReturn();
  // }

  @Test
  public void addNewRide() throws Exception {
    String newRide = "{\"name\":\"Monorail\",\"description\":\"Sedate travelling ride.\",\"thrillFactor\":2,\"vomitFactor\":1}";
    mockMvc.perform(MockMvcRequestBuilders.get("/themepark/ride")
            .contentType(MediaType.APPLICATION_JSON)
            .content(newRide)
            .accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk())
            .andReturn();
  }
}
